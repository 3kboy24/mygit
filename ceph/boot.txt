-rootfs.1228.gz
--rootfs.1230.gz(install_dep.pl)
-rootfs.1229.14.04.05.gz(wgetrc,locale,upgrade 14.04.05)

=>rootfs.bak.20170109(before ceph install)
=>rootfs.bak.20170110(After ceph install)
=>rootfs.bak.20170110.night(After config ssh)
0.环境说明
 0-1.ServerIP:193.168.0.101
 0-2.ClientIP:193.168.0.177
 0-3.Gateway:193.168.0.1
 0-4.server上的根文件系统:/home/ceph01/nfs/rootfs(有ubuntu文件系统)
 0-5.server上tftp:/home/ceph01/tftpboot(有zImage和dtb)
 0-6.server和板子上的4个网线同接在一个交换机上面

1.nfs启动
 1-1.重命名securetty文件(否则无法登录root账户)
     mv /etc/securetty /etc/securetty.bak

 1-2.设置环境变量
     setenv ipaddr 193.168.0.177
     setenv serverip 193.168.0.101

 1-3.uboot下载kernel镜像和dtb文件
     tftp 0x2000000 193.168.0.101:zImage
     tftp 0x1000000 193.168.0.101:dtb

 1-4.uboot下配置通过NFS挂载根文件系统
     setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=193.168.0.101:/home/ceph01/nfs/rootfs ip=193.168.0.177:193.168.0.101:193.168.0.1:255.255.255.0:armada38x:eth0:none init=/sbin/init

 1-5.uboot下启动linux
     bootz 0x2000000 - 0x1000000

2.eMMC启动
 2-1.nfs启动完了

 2-2. 格式化分区：
 mkfs.ext2 /dev/mmcblk0p1
 mkfs.ext4 /dev/mmcblk0p2

 2-3. kernel烧录
  2-3-1.拷贝kernel文件到板子使用的nfs文件系统tmp文件夹下
        cp /home/ceph01/tftpboot/dtb /home/ceph01/nfs/rootfs/tmp/
        cp /home/ceph01/tftpboot/zImage /home/ceph01/nfs/rootfs/tmp/

  2-3-2.挂载eMMC的第一个分区到/mnt
        mount /dev/mmcblk0p1 /mnt

  2-3-3.拷贝内核镜像和dtb
        cp /tmp/zImage /mnt
        cp /tmp/dtb /mnt
	 
  2-3-4.卸载eMMC的第一个分区
        umount /mnt

 2-4.烧录根文件系统
  2-4-1.server压缩根文件系统
        tar -zcvf /home/ceph01/rootfs_backups/rootfs.gz /home/ceph01/nfs/rootfs 

  2-4-2.拷贝server上的根文件系统到板子使用的nfs文件系统tmp文件夹下（server执行）
        cp /home/ceph01/rootfs_backups/rootfs.gz /home/ceph01/nfs/rootfs/tmp/

  2-4-3.挂载eMMC第二个分区
        mount /dev/mmcblk0p2 /mnt

  2-4-4.移动根文件系统到mnt下
        mv /tmp/rootfs.gz /mnt

  2-4-5.解压跟文件系统到eMMC第二个分区
        tar -zxvf /mnt/rootfs.tgz -C /mnt

  2-4-6.卸载eMMC第二个分区
        umount /mnt

 2-5.配置uboot启动命令和启动参数
     配置uboot参数从eMMC加载内核镜像和挂载根文件系统运行
     setenv bootcmd 'ext2load mmc 0:1 0x2000000 /zImage; ext2load mmc 0:1 0x1000000 /dtb; bootz 0x2000000 - 0x1000000;'
     setenv bootargs root=/dev/mmcblk0p2 rw console=ttyS0,115200 rootwait

 2-6.执行eMMC启动
     run bootcmd


=>rootfs.1228.gz
3.追加wgetrc
  .bashrc 最后追加 LC_ALL=C
  修改/etc/default/locale  
    LANG="zh_CN.UTF-8"
    LANGUAGE="zh_CN:zh"

locale-gen en_US.UTF-8 
locale-gen zh_CN.UTF-8 

apt-get upgrdade
=>rootfs.1229.14.04.05.gz

     setenv ipaddr 193.168.0.177
     setenv serverip 193.168.0.101
 1-3.uboot下载kernel镜像和dtb文件
     tftp 0x2000000 193.168.0.101:zImage
     tftp 0x1000000 193.168.0.101:dtb

 1-4.uboot下配置通过NFS挂载根文件系统
     setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=193.168.0.101:/home/ceph01/nfs/rootfs ip=193.168.0.177:193.168.0.101:193.168.0.1:255.255.255.0:armada38x:eth0:none init=/sbin/init

 1-5.uboot下启动linux
     bootz 0x2000000 - 0x1000000

export PATH=$PATH:/home/ceph01/projects/armv7-marvell-linux-gnueabihf-hard-4.8.5_i686_20150706/bin
export CROSS_ROOT=/home/ceph01/nfs/rootfs
export CC=arm-linux-gnueabihf-gcc
export CXX=arm-linux-gnueabihf-g++
export CCC=arm-linux-gnueabihf-g++
export CCAS=arm-linux-gnueabihf-as
export AR=arm-linux-gnueabihf-ar
export RANLIB=arm-linux-gnueabihf-ranlib
export LD=arm-linux-gnueabihf-ld
export CXXLD=arm-linux-gnueabihf-g++
export LD_LIBRARY_PATH=$CROSS_ROOT/lib:$CROSS_ROOT/usr/lib:$CROSS_ROOT/usr/boost/lib:$CROSS_ROOT/lib/arm-linux-gnueabihf:$CROSS_ROOT/usr/lib/arm-linux-gnueabihf

-./configure --prefix=$CROSS_ROOT --host=arm-linux-gnueabihf LDFLAGS="-L$CROSS_ROOT/lib -L$CROSS_ROOT/usr/lib -L$CROSS_ROOT/usr/boost/lib -L$CROSS_ROOT/lib/arm-linux-gnueabihf -L$CROSS_ROOT/usr/lib/arm-linux-gnueabihf -Wl,-R,/usr/lib:/usr/boost/lib:/lib:/usr/lib/arm-linux-gnueabihf:/lib/arm-linux-gnueabihf -Wl,-rpath-link,$CROSS_ROOT/usr/lib:$CROSS_ROOT/usr/boost/lib:$CROSS_ROOT/lib:$CROSS_ROOT/usr/lib/arm-linux-gnueabihf:$CROSS_ROOT/lib/arm-linux-gnueabihf" LIBS=-lstdc++ CFLAGS="-I$CROSS_ROOT/usr/include -I$CROSS_ROOT/include -I$CROSS_ROOT/usr/boost/include -I$CROSS_ROOT/include/arm-linux-gnueabihf -I$CROSS_ROOT/usr/include/arm-linux-gnueabihf" CPPFLAGS="-I$CROSS_ROOT/usr/include -I$CROSS_ROOT/include -I$CROSS_ROOT/usr/boost/include -I$CROSS_ROOT/include/arm-linux-gnueabihf -I$CROSS_ROOT/usr/include/arm-linux-gnueabihf" --without-lttng

-make

1.libsnappy not found
apt-get install libsnappy1
apt-get install libsnappy-dev

2.apt-get 补齐
apt-get install bash-completion
if [ -f /etc/bash_completion ]; then
. /etc/bash_completion
fi

3.error: blkid/blkid.h not found (libblkid-dev, libblkid-devel)
apt-get install libblkid-dev libblkid-devel

4.cannot find /lib/arm-linux-gnueabihf/ld-linux-armhf.so.3
sudo cp -r ~/nfs/rootfs/usr/lib/arm-linux-gnueabihf /usr/lib/
sudo cp -r ~/nfs/rootfs/lib/arm-linux-gnueabihf /lib/

5.configure: error: libudev.h not found (libudev-dev, libudev-devel)
apt-get install libudev-dev

6.configure: error: expat.h not found (libexpat-devel)
apt-get install libexpat1-dev libexpat1

7.configure: error: libkeyutils not found (libkeyutils-dev, keyutils-libs-devel)
apt-get install libkeyutils1 libkeyutils-dev

8.依赖包手动安装
apt-get install libatomic-ops-dev 
apt-get install libaio1 libaio-dev
apt-get install xfslibs-dev 
apt-get install libpthread-stubs0-dev
apt-get install libboost-dev
apt-get install libboost-iostreams-dev
apt-get install libboost-thread-dev
apt-get install libboost-random1.54-dev
apt-get install libboost-program-options-dev
apt-get install liblttng-ust-dev
apt-get install ldap-utils

9.板子上执行脚本install-deps.sh
The following extra packages will be installed:                                 
  at bsdmainutils build-essential dctrl-tools debhelper dh-apparmor diffstat    
  distro-info-data dpkg-dev dput fakeroot file g++ g++-4.8 gettext              
  gettext-base groff-base hardening-includes intltool-debian iso-codes          
  libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl      
  libapt-pkg-perl libarchive-zip-perl libasprintf-dev libasprintf0c2            
  libauthen-sasl-perl libautodie-perl libclass-accessor-perl libclone-perl      
  libcommon-sense-perl libcroco3 libdigest-hmac-perl libdistro-info-perl        
  libdpkg-perl libemail-valid-perl libencode-locale-perl liberror-perl          
  libexporter-lite-perl libfakeroot libfile-basedir-perl                        
  libfile-fcntllock-perl libfile-listing-perl libfont-afm-perl                  
  libgettextpo-dev libgettextpo0 libglib2.0-0 libglib2.0-data                   
  libhtml-form-perl libhtml-format-perl libhtml-parser-perl                     
  libhtml-tagset-perl libhtml-tree-perl libhttp-cookies-perl                    
  libhttp-daemon-perl libhttp-date-perl libhttp-message-perl                    
  libhttp-negotiate-perl libio-html-perl libio-pty-perl                         
  libio-socket-inet6-perl libio-socket-ssl-perl libio-string-perl               
  libio-stringy-perl libipc-run-perl libipc-system-simple-perl libjson-perl     
  libjson-xs-perl liblist-moreutils-perl liblwp-mediatypes-perl                 
  liblwp-protocol-https-perl libmagic1 libmail-sendmail-perl libmailtools-perl  
  libnet-dns-perl libnet-domain-tld-perl libnet-http-perl libnet-ip-perl        
  libnet-smtp-ssl-perl libnet-ssleay-perl libparse-debcontrol-perl              
  libparse-debianchangelog-perl libperlio-gzip-perl libpipeline1                
  libsocket6-perl libsub-identify-perl libsub-name-perl                         
  libsys-hostname-long-perl libtext-levenshtein-perl libtie-ixhash-perl         
  libtimedate-perl libunistring0 liburi-perl libwww-perl                        
  libwww-robotrules-perl libxml2 lintian make man-db patch patchutils           
  po-debconf python-apt-common python3-apt python3-chardet python3-debian       
  python3-magic python3-pkg-resources python3-six sgml-base shared-mime-info    
  strace t1utils unzip wdiff xml-core xz-utils 

10.
apt-get install libldap2-dev
apt-get install libgoogle-perftools-dev       
apt-get remove libboost-×
apt-get install libcrypto++-dev 
apt-get install libfuse-dev

11.zlib交叉编译
http://zlib.net/
./configure --prefix=$CROSS_ROOT
-make LDFLAGS="'-Wl,-R,$CROSS_ROOT/usr/lib:$CROSS_ROOT/usr/boost/lib'"
make install

12.AT_EMPTY_PATH no defined
os/fs/FS.cc: In member function 'virtual int FS::get_handle(int, std::string*)':
os/fs/FS.cc:76:52: error: 'AT_EMPTY_PATH' was not declared in this scope
   int r = name_to_handle_at(fd, "", fh, &mount_id, AT_EMPTY_PATH);

参照usr/include/linux/fcntl.h:#define AT_EMPTY_PATH		0x1000	/* Allow empty relative pathname */
将os/fs/FS.cc中宏改为常量

13.C++编译错误
http://www.spinics.net/lists/ceph-devel/msg29042.html
./configure --with-radosgw

14.libcurl安装
apt-get install libcurl3 
apt-get install libcurlpp-dev 
apt-get install libcurl4-nss-dev 

15.libfcgi-2.4.0.orig交叉编译
-vim libfcgi/fcgio.cpp
 add #include "stdio.h"
-./configure --prefix=$CROSS_ROOT --target=arm-linux-gnueabi --host=x86_64-linux-gnu
-make
-make install

16.openssl-1.0.2g交叉编译
./config no-asm shared --prefix=/home/ceph01/temp/openssllib
vi Makefile
#-m64
make 
make install
cp -r /home/ceph01/temp/openssllib/include/openssl /home/ceph01/nfs/rootfs/include/
cp /home/ceph01/temp/openssllib/lib/libssl.a libssl.so libssl.so.1.0.0 libcrypto.a libcrypto.so libcrypto.so.1.0.0 /home/ceph01/nfs/rootfs/usr/lib

17.ceph安装
-su
-make install

18.in arm linux
-vim /etc/profile
 export LD_LIBRARY_PATH=/usr/boost/lib

19.ceph -v 错误
root@localhost:~# ceph -v                                                       
Traceback (most recent call last):                                              
  File "/bin/ceph", line 118, in <module>                                       
    import rados                                                                
ImportError: No module named rados

Python-2.7.3
交叉编译前卸载板子上的apt-get remove python2.7 python2.7-* --purge
-./configure
-make python Parser/pgen
-mv python hostpython
-mv Parser/pgen Parser/hostpgen
-make distclean
-patch -p1 < ../Python-2.7.3-xcompile.patch
-export AR=arm-linux-gnueabihf-ar
-export RANLIB=arm-linux-gnueabihf-ranlib
-./configure --prefix=$CROSS_ROOT --build=x86_64-linux-gnu --host=arm-linux-gnueabihf --with-system-ffi --enable-unicode=ucs4
-export HOSTARCH=arm-linux-gnueabihf
-export BUILDARCH=x86_64-linux-gnu
-make HOSTPYTHON=./hostpython HOSTPGEN=./Parser/hostpgen BLDSHARED="arm-linux-gnueabihf-gcc -shared" CROSS_COMPILE=arm-linux-gnueabihf- CROSS_COMPILE_TARGET=yes
-make HOSTPYTHON=./hostpython HOSTPGEN=./Parser/hostpgen BLDSHARED="arm-linux-gnueabihf-gcc -shared" CROSS_COMPILE=arm-linux-gnueabihf- CROSS_COMPILE_TARGET=yes install

export PATH=$PATH:/home/ceph01/projects/armv7-marvell-linux-gnueabihf-hard-4.8.5_i686_20150706/bin
export AR=arm-linux-gnueabihf-ar
export RANLIB=arm-linux-gnueabihf-ranlib
export HOSTARCH=arm-linux-gnueabihf
export BUILDARCH=x86_64-linux-gnu

20.ARM板子上python环境变量
export PYTHONHOME=/
export PYTHONPATH=/lib/python2.7
export PATH=$PATH:$PYTHONHOME:$PYTHONPATH

21.网络
vi /etc/network/interfaces
auto eth2
iface eth2 inet static
address 193.168.0.177
netmask 255.255.255.0
gateway 193.168.0.1

22.ssh登陆
chmod 600 /etc/ssh/*

=>rootfs.bak.20170110.night

23.size削减
rm /lib/librbd.a
rm /lib/librgw.a
rm /lib/libcephfs.a
rm /lib/libradosstriper.a
rm /lib/librados.a

24.sshd 参数传递
-vi /etc/ssh/sshd_config
  PermitUserEnvironment yes
-vi ~/.ssh/environment
  LD_LIBRARY_PATH=/usr/boost/lib
  PYTHONHOME=/

25.主机名修改
vi /etc/hostname
board1.localdomain

29.dlopen(erasure-code)
-mkdir -p /home/ceph01/nfs/rootfs/lib/ceph/erasure-code
-cd /home/ceph01/nfs/rootfs/lib/ceph/erasure-code/
-cp /lib/ceph/erasure-code/libec_* .

=>rootfs.bak.20170113.morning


cp /tmp/ceph-disk /mnt/usr/local/bin/


PYTHON_CFLAGS = -I/home/ceph01/nfs/rootfs/usr/include/python2.7 -I/home/ceph01/nfs/rootfs/usr/include/arm-linux-gnueabihf/python2.7  -fno-strict-aliasing -D_FORTIFY_SOURCE=2 -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security  -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes

PYTHON_LDFLAGS = -L/usr/lib/python2.7/config-arm-linux-gnueabihf -L/home/ceph01/nfs/rootfs/usr/lib -lpthread -ldl  -lutil -lm  -lpython2.7 -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions


apt-get install python-setuptools
apt-get install python-pip

https://pypi.python.org/pypi/distribute
distribute 0.7.3
-cd distribute 0.7.3
python setup.py install

cp /tmp/ceph-disk-virtualenv/bin/ceph-disk ~/nfs/rootfs/usr/local/bin/
vi ceph-disk
#!/tmp/ceph-detect-init-virtualenv/bin/python2.7 -> #!/usr/bin/python2.7
cp /tmp/ceph-detect-init-virtualenv/bin/ceph-disk ~/nfs/rootfs/usr/local/bin/
vi ceph-detect-init
#!/tmp/ceph-detect-init-virtualenv/bin/python2.7 -> #!/usr/bin/python2.7

cp /usr/local/lib/python2.7/dist-packages/ceph_detect_init-1.0.1-py2.7.egg /home/ceph01/nfs/rootfs/lib/python2.7/site-packages/
cp /usr/local/lib/python2.7/dist-packages/ceph_disk-1.0.0-py2.7.egg /home/ceph01/nfs/rootfs/lib/python2.7/site-packages/



/etc/init.d/ceph
/etc/init/ceph*
/etc/init/radosgw*
/libexec/ceph/ceph_common.sh
/libexec/ceph/ceph-osd-prestart.sh
/etc/rc0.d/K20ceph
/etc/rc1.d/K20ceph
/etc/rc2.d/S20ceph
/etc/rc3.d/S20ceph
/etc/rc4.d/S20ceph
/etc/rc5.d/S20ceph


sudo ipmitool -I lanplus -H 192.168.1.18 -U root -P superuser sol deactivate

sudo ipmitool -I lanplus -H 192.168.1.18 -U root -P superuser raw 0x00 0x10 0
sudo ipmitool -I lanplus -H 192.168.1.18 -U root -P superuser sol activate

     setenv ipaddr 192.168.1.177
     setenv serverip 192.168.1.100
 1-3.uboot下载kernel镜像和dtb文件
     tftp 0x2000000 192.168.1.100:zImage
     tftp 0x1000000 192.168.1.100:dtb

 1-4.uboot下配置通过NFS挂载根文件系统
     setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=192.168.1.100:/home/ceph01/nfs/rootfs ip=192.168.1.177:192.168.1.100:192.168.1.1:255.255.255.0:armada38x:eth0:none init=/sbin/init

setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=192.168.1.100:/home/ceph01/nfs/ubuntu ip=192.168.1.177:192.168.1.100:192.168.1.1:255.255.255.0:armada38x:eth0:none init=/sbin/init

setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=192.168.1.100:/home/ceph01/nfs/rootfs.before.buildrelease ip=192.168.1.177:192.168.1.100:192.168.1.1:255.255.255.0:armada38x:eth0:none init=/sbin/init


 1-5.uboot下启动linux
     bootz 0x2000000 - 0x1000000


apt-get install nfs-common
mount -t nfs 193.168.0.101:/home/ceph01/nfs /mnt


rm -r /var/lib/ceph/mon/*
rm -r /var/lib/ceph/tmp/*
rm /etc/ceph/*
rm -r /var/lib/ceph/osd/*
rm -r /var/local/osd*


tar -cvpjf /mnt/rootfs.bak.20170216.tar.bz2 --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /



tar -cvpjf /mnt/rootfs.bak.20170209.tar.bz2 --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /

nfs 启动
mount /dev/mmcblk0p2 /mnt
tar xjvpmf rootfs.bak.20170209.tar.bz2  -C /
reboot

tar -cvpjf /mnt/rootfs.bak.20170210_A0.tar.bz2 --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xjvpmf rootfs.bak.20170210_A0.tar.bz2  -C /

tar -cvpzf /mnt/rootfs.bak.20170216.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xzvpmf rootfs.bak.20170216.tar.gz   -C /

tar -cvpzf /mnt/rootfs.bak.20170216_without_boost.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /

tar -cvpzf /mnt/rootfs.bak.20170217.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xzvpmf rootfs.bak.20170217.tar.gz   -C /

mount -t nfs 193.168.0.101:/home/ceph01/nfs /mnt
tar -cvpzf /mnt/rootfs.bak.20170217_A0.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xzvpmf rootfs.bak.20170217_A0.tar.gz   -C /

tar -cvpzf /mnt/rootfs.bak.20170217_A1.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xzvpmf rootfs.bak.20170217_A1.tar.gz   -C /

tar -cvpjf /mnt/rootfs.bak.20170308_onlyafaterinstalldep.tar.bz2 --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys --exclude=/hdd /



ceph osd pool create cephfs_data 10
ceph osd pool create cephfs_metadata 10
ceph fs new leadorfs  cephfs_metadata cephfs_data
sudo mount -t ceph 193.168.0.201:6789:/ /mnt/mycephfs -o name=admin,secretfile=admin.secret

vi /etc/cron.hourly/timeupdate
ntpdate 193.168.0.101

/dev/sda1	/var/local/osd8		ext4	defaults	0	0

ARM:
reboot

PC:
root@cell01:/home/ceph01/nfs/rootfs# cp -r * ./myrootfs/

ARM:
nfs启动
mount /dev/mmcblk0p2 /mnt
cp -r /myrootfs/* /mnt/
reboot

1.
vi /libexec/ceph/ceph-osd-prestart.sh
        hook="/bin/ceph-crush-location"
2. vi /bin/ceph-crush-location
    BINDIR=/bin
    SBINDIR=/sbin
    LIBDIR=/lib/ceph
    ETCDIR=/etc/ceph
3.
ceph-deploy mon create-initial失败，提示asok文件不存在的时候，是因为ceph-mon守护进程没有启动成功。
可以查看守护进程的log，在/var/log/upstart下。
-vi /etc/ld.so.conf
/usr/boost/lib
-ldconfig

4.
vi /etc/network/interfaces
rm /etc/udev/rules.d/70-persistent-net.rules

5.
chmod 600 /etc/ssh/*

6.
rm /usr/boost/lib/*.a

7. 
apt-get clean
apt-get autoremove

8.
chown -R ceph:ceph /var/lib/ceph
chown -R ceph:ceph /var/log/ceph

9.
apt-get install nfs-common

10.
mount -t nfs 193.168.0.101:/home/ceph01/nfs /mnt
tar -cvpzf /mnt/rootfs.bak.20170315_A0.tar.gz --exclude=/mnt --exclude=proc --exclude=/lost+found --exclude=/sys /
tar xzvpmf rootfs.bak.20170315_A0.tar.gz   -C /

vi /etc/network/interfaces
rm /etc/udev/rules.d/70-persistent-net.rules
vi /etc/hostname

11.
rm /var/lib/ceph/bootstrap-osd/*
rm /var/lib/ceph/bootstrap-rgw/*
rm -r /var/lib/ceph/mon/*
rm -r /var/lib/ceph/osd/*
rm /var/lib/ceph/tmp/*
rm /etc/ceph/*




cp /lib/librbd.a /mnt/lib/
cp /lib/librgw.a /mnt/lib/
cp /lib/libcephfs.a /mnt/lib/
cp /lib/libradosstriper.a /mnt/lib/
cp /lib/librados.a /mnt/lib/

rbd create foo --size 1024 --pool rbd
rbd create foo --size 1024 -m 193.168.0.201 -k /etc/ceph/ceph.client.admin.keyring
rbd create foo --size 1024 -m 193.168.0.208 -k ./ceph.client.admin.keyring

cp /tmp/ceph-disk-virtualenv/bin/ceph-disk ~/nfs/rootfs/usr/local/bin/
vi ceph-disk
#!/tmp/ceph-detect-init-virtualenv/bin/python2.7 -> #!/bin/python2.7
cp /tmp/ceph-detect-init-virtualenv/bin/ceph-disk ~/nfs/rootfs/usr/local/bin/
vi ceph-disk
#!/tmp/ceph-detect-init-virtualenv/bin/python2.7 -> #!/bin/python2.7

cp /usr/local/lib/python2.7/dist-packages/ceph_detect_init-1.0.1-py2.7.egg /home/ceph01/nfs/rootfs/lib/python2.7/site-packages/
cp /usr/local/lib/python2.7/dist-packages/ceph_disk-1.0.0-py2.7.egg /home/ceph01/nfs/rootfs/lib/python2.7/site-packages/

ceph osd getcrushmap -o crushmap_compiled_file
crushtool -d crushmap_compiled_file -o crushmap_decompiled_file

vi crushmap_decompiled_file
crushtool -c crushmap_decompiled_file -o newcrushmap
ceph osd setcrushmap -i newcrushmap 


/home/ceph01/nfs/rootfs/lib/ceph/erasure-code/libec_jerasure.so

./src/osd/ClassHandler.cc


        -DCEPH_LIBDIR=\"${libdir}\" -DCEPH_PKGLIBDIR=\"${pkglibdir}\" \

prefix = /home/ceph01/nfs/rootfs
exec_prefix = ${prefix}
libdir = ${exec_prefix}/lib
pkglibdir = $(libdir)/ceph

libdir= /home/ceph01/nfs/rootfs/lib
pkglibdir = /home/ceph01/nfs/rootfs/lib/ceph

osd_class_dir = /lib/ceph/
compression_dir = 
erasure_code_dir = 
plugin_dir

src/common/config_opts.h:

OPTION(plugin_dir, OPT_STR, CEPH_PKGLIBDIR)
OPTION(erasure_code_dir, OPT_STR, CEPH_PKGLIBDIR"/erasure-code") // default location for erasure-code plugins
OPTION(compression_dir, OPT_STR, CEPH_PKGLIBDIR"/compressor") // default location for compression plugins
OPTION(osd_class_dir, OPT_STR, CEPH_LIBDIR "/rados-classes") // where rados plugins are stored

plugin_dir =

erasure_code_dir = /lib/ceph/erasure-code
compression_dir = /lib/ceph/compressor
osd_class_dir = /lib/rados-classes
plugin_dir = /lib/ceph


ceph daemon mon.node1 config show | more
service ntp stop
ntpdate 193.168.0.101


export HTTPS_PROXY=https://zhao-hd:1234qwer!@dl-proxy.neusoft.com:8080
export ftp_proxy=http://zhao-hd:1234qwer!@dl-proxy.neusoft.com:8080
export FTP_PROXY=http://zhao-hd:1234qwer!@dl-proxy.neusoft.com:8080

export http_proxy="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export https_proxy="https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export HTTP_PROXY="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export HTTPS_PROXY="https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export ftp_proxy="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export FTP_PROXY="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"



export HTTPS_PROXY="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"
export https_proxy="http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080"

git config --global http.proxy http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080
git config --global https.proxy https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080
git config --global ftp.proxy http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080

git config --global https.proxy https://user:password@address:port

git config --global --unset http.proxy 


git clone -c http.proxy http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080  git://github.com/ceph/ceph


git clone git://github.com/ceph/ceph
git submodule update --init --recursive

git config --global http.sslVerify false

git clone https://github.com/ceph/ceph.git


https://bootstrap.pypa.io/get-pip.py

[global]
index-url=https://mirrors.aliyun.com/pypi/simple/

[install]
trusted-host=https://mirrors.aliyun.com/pypi/simple/

sudo -E pip3 install --proxy http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080 virtualenv


curl -O https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz
tar xvfz pip-1.2.1.tar.gz
cd pip-1.2.1
python setup.py install





pip install -i https://mirrors.aliyun.com/pypi/simple --proxy http://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080 virtualenv





pip install --proxy https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080 virtualenv
pip install --proxy https://zhao-hd:1234qwer\!@192.168.107.27:8080 virtualenv upgrade
192.168.107.27


root@arm3:/hdd/ceph-12.0.0# pip install --proxy https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080 virtualenv
Requirement already satisfied: virtualenv in /usr/lib/python2.7/dist-packages
root@arm3:/hdd/ceph-12.0.0# pip install --proxy https://zhao-hd:1234qwer\!@dl-proxy.neusoft.com:8080 virtualenv upgrade
Requirement already satisfied: virtualenv in /usr/lib/python2.7/dist-packages
Collecting upgrade
  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0xb6326090>, 'Connection to dl-proxy.neusoft.com timed out. (connect timeout=15)')': /pypi/simple/upgrade/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0xb63262d0>, 'Connection to dl-proxy.neusoft.com timed out. (connect timeout=15)')': /pypi/simple/upgrade/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0xb6308150>, 'Connection to dl-proxy.neusoft.com timed out. (connect timeout=15)')': /pypi/simple/upgrade/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0xb63081b0>, 'Connection to dl-proxy.neusoft.com timed out. (connect timeout=15)')': /pypi/simple/upgrade/


-Wl,--stack=0x2000000
--param ggc-min-expand=0 --param ggc-min-heapsize=2048

--param ggc-min-expand=100 --param ggc-min-heapsize=131072
131072 (128 megabytes)
--param ggc-min-expand=50 --param ggc-min-heapsize=65536

smb://10.4.47.58\\Wowen-pc\1111
smb://10.4.47.58

smb://10.4.47.58//Wowen-pc/1111

smb://10.4.47.58/Wowen-pc/1111/

                              




                   















